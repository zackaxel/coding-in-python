
    
    
    import pandas as pd
    
    df = pd.read_csv() 
    df 
    
    y = df('logS')
    y 
    
    X = df.drop('logS', axis = 1) 
    
    
    from sklearn.model_selection import train_test_split
    
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=100)
            
    from sklearn.linear_model import LinearRegression
    
    lr = LinearRegression()  
    lr.fit(X_train, y_train) 
    
    y_lr_train_pred = lr.predict(X_train)
    y_lr_test_pred = lr.predict(X_test) 
    
    print(y_lr_train_pred, y_lr_test_pred) 
    
    from sklearn.metrics import mean_squared_error, r2_score
    
    lr_train_mse = mean_squared_error(y_train, y_lr_train_pred) 
    lr_train_r2 = r2_score(y_train, y_lr_train_pred) 
    
    lr_test_mse = mean_squared_error(y_test, y_lr_test_pred)
    lr_test_r2 = r2_score(y_test, y_lr_test_pred) 
    
    lr_results = pd.DataFrame(['Linear regression', lr_train_mse, lr_train_r2, lr_test_mse, lr_test_r2]).transpose() 
    
    lr_results.columns = ['Method', 'Training MSE', 'Training R2', 'Test MSE', 'Test R2']
    
    from sklearn.ensemble import RandomForestRegressor
    
    rf = RandomForestRegressor(max_depth=2, random_state=100) 
    rf.fit(X_train, y_train) 
    
    y_rf_train_pred = rf.predict(X_train)
    y_rf_test_pred = rf.predict(X_test) 
    
    rf_train_mse = mean_squared_error(y_train, y_rf_train_pred) 
    rf_train_r2 = r2_score(y_train, y_rf_train_pred) 
    
    rf_test_mse = mean_squared_error(y_test, y_rf_test_pred)
    rf_test_r2 = r2_score(y_test, y_rf_test_pred) 
    
    df_models = pd.concat([lr_results, rf_results], axis=0)
    
    df_models.reset_index(drop=True) 
    
    import matplotlib.pyplot as plt
    import numpy as np
    
    plt.figure(figsize=(5,5))
    plt.scatter(x=y_train, y=y_lr_train_pred, c="#7CAE00", alpha=0.3) 
    
    z = np.polyfit(y_train, y_lr_train_pred, 1) 
    p = np.poly1d(z)
    
    
    plt.plot(y_train, p(y_train), '#F8766D')
    plt.ylabel('Predict LogS')
    plt.xlabel('Experimental LogS')
    

